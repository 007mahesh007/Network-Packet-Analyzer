from scapy.all import sniff, IP, TCP, UDP

def packet_callback(packet):
    """
    Callback function that processes captured packets.
    """
    # Check if the packet has an IP layer
    if IP in packet:
        src_ip = packet[IP].src
        dst_ip = packet[IP].dst
        protocol = packet[IP].proto

        print(f"[+] Packet: {src_ip} -> {dst_ip}, Protocol: {protocol}")

        # Check for TCP/UDP layers and display more details
        if TCP in packet:
            print(f"    [TCP] Source Port: {packet[TCP].sport}, Dest Port: {packet[TCP].dport}")
        elif UDP in packet:
            print(f"    [UDP] Source Port: {packet[UDP].sport}, Dest Port: {packet[UDP].dport}")

        # Print payload if any
        if packet[IP].payload:
            print(f"    Payload: {bytes(packet[IP].payload)[:100]}")  # Limit payload display to 100 bytes

def start_sniffer(interface="eth0"):
    """
    Starts the packet sniffer on the specified interface.
    """
    print(f"[*] Starting packet sniffer on {interface}...")
    sniff(iface=interface, prn=packet_callback, store=False)

if __name__ == "__main__":
    interface = input("Enter the network interface to sniff (e.g., eth0, wlan0): ")
    start_sniffer(interface)
